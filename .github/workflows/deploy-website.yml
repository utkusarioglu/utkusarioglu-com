name: deploy-website

on:
  push:
    branches:
      - main
      - dev
    tags:
      - "**.**.**"
      - experiment/**/**/**
  workflow_dispatch:

jobs:
  build-website:
    uses: ./.github/workflows/build-website.yml
    secrets: inherit

  build-pdfs:
    needs:
      - build-website
    uses: ./.github/workflows/build-pdfs.yml
    secrets: inherit

  deploy-website:
    needs:
      - build-website
      - build-pdfs
    name: Sync changes to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download web build artifact
        uses: actions/download-artifact@v2
        with:
          name: utkusarioglu-com-web-build
          path: build

      - name: Download Puppeteer artifacts
        uses: actions/download-artifact@v2
        with:
          name: utkusarioglu-com-pdf-artifacts
          path: .puppeteer/artifacts

      - name: Migrate Puppeteer artifacts
        run: scripts/migrate-puppeteer-artifacts.sh

      - name: Determine Terraform config
        id: terraform-config
        run: |
          DOMAIN=utkusarioglu.com
          SUBPATH=dev
          SUBDOMAIN=dev
          TF_ACTION=plan

          if [ ${{ github.ref_name }} == main ];
          then
            SUBDOMAIN=www
          fi 

          if [ -d ".terraform/${{ github.ref_name }}" ];
          then
            TF_ACTION=apply
            SUBPATH=${{ github.ref_name }}
          fi

          echo "::set-output name=tf-action::$TF_ACTION"
          echo "::set-output name=subpath::$SUBPATH"
          echo "::set-output name=subdomain::$SUBDOMAIN"
          echo "Terraform will use module '$SUBPATH' to '$TF_ACTION' for '$SUBDOMAIN.$DOMAIN'"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache `.terraform`
        uses: actions/cache@v3
        id: terraform-cache
        with:
          path: .terraform
          key: terraform-cache-${{ hashFiles('.terraform.lock.hcl' )}}
          restore-keys: |
            terraform-cache-

      - name: Terraform init
        if: steps.terraform-cache.outputs.cache-hit != 'true'
        run: |
          SUBPATH=${{ steps.terraform-config.outputs.subpath }}
          terraform -chdir=./.terraform/$SUBPATH init

      - name: Terraform action
        run: |
          SUBPATH=${{ steps.terraform-config.outputs.subpath }}
          TF_ACTION=${{ steps.terraform-config.outputs.tf-action}}
          if [ $TF_ACTION == 'apply' ];
          then
            echo "Running 'terraform apply'..."
            terraform -chdir=./.terraform/$SUBPATH apply --auto-approve
          else 
            echo "Running 'terraform plan'..."
            terraform -chdir=./.terraform/$SUBPATH plan
          fi

      - name: Invalidate Cloudfront cache
        if: steps.terraform-config.outputs.tf-action == 'apply'
        run: |
          SUBDOMAIN=${{ steps.terraform-config.outputs.subdomain }} 
          scripts/aws-create-invalidation.sh $SUBDOMAIN

      - name: Telegram notifications
        if: always()
        uses: utkusarioglu/telegram-notifications@main
        with:
          telegram_id: ${{ secrets.TELEGRAM_ID }}
          telegram_token: ${{ secrets.TELEGRAM_TOKEN }}
          job_status: ${{ job.status }}
          github_context: ${{ toJson(github) }}
